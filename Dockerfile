# Stage 1: Build the React frontend
# Use a Node.js image to build the frontend assets.
FROM node:18-alpine AS frontend-builder

# Set the working directory for the frontend code
WORKDIR /app/text-to-sql-frontend

# Copy package.json and package-lock.json first to leverage Docker's layer caching.
# This makes subsequent builds faster if dependencies haven't changed.
COPY text-to-sql-frontend/package*.json ./

# Install frontend dependencies
RUN npm install

# Copy the rest of the frontend source code
COPY text-to-sql-frontend/ ./

# Fix the permissions for the vite executable
# This is a critical step to solve the "Permission denied" error.
# The `chmod` command makes the vite executable runnable by the user.
RUN chmod +x ./node_modules/.bin/vite

# Build the optimized production assets.
# This runs the 'build' script defined in your package.json
RUN npm run build

# Stage 2: Create the final production image
# Use a lightweight Python image for the backend.
FROM python:3.9-slim-buster

# Set the working directory for the backend
WORKDIR /app

# Copy the backend requirements file and install Python dependencies.
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Copy the database file
COPY northwind.db .

# Copy the backend application code
COPY main.py .

# Copy the optimized frontend assets from the builder stage
# We're taking the 'dist' folder generated by the build and placing it where your FastAPI app expects to find it.
COPY --from=frontend-builder /app/text-to-sql-frontend/dist /app/static/dist

# Expose the port the Uvicorn server will listen on
EXPOSE 8000

# Command to run the application using Uvicorn.
CMD ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000"]
